a)  See the LinearTailRecursion and MultipleRecursion classes for
    the implementations of the algorithms.

b)  The Linear Recursion Algorithm seems to follow a linear complexity
    (executed n-2 times every time, meaning it is O(n)).

    Multiple recursion on the other hand, is a lot slower because at every call, 
    It needs to call the four previous values. i.e. for n = 5, it calls (n-1), (n-2)
    (n-3) and (n-4) making this an exponential time complexity. This causes a bottleneck
    as the value of n grows. Linear recursion solves this issue by reusing the same values
    Over and thus saving time. 

c)  The Linear Recursion Algorithm does not currently implement
    tail recursion, as the recursive call is not the last
    instruction to be executed. It has been implemented that way
    because it is impossible to print the full list of Tetranacci
    numbers if the algorithm is implemented with tail recursion.
    If the algorithm is implemented with tail recursion in mind,
    it will calculate the value of the element properly but it will
    not display the first three zeros that are part of the Tetranacci
    numbers. The list will start at the fourth element, because
    displaying the initial zeros would require an initial array of
    [0,0,0,0], which would effectively give a value of 0 to every
    next element. we must therefore start with the array [0,0,0,1].
    The tail recursive code for the linear algorithm is located in
    the "LinearTailRecursion" class.

    The Multiple recursion does not implement tail recursion since tail recursion is
    only applicable to linearly recursive algorithms. 